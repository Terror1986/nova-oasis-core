from flask import Flask, request, jsonify, render_template, session, redirect, url_for, Blueprint
import os, json
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore, auth
from utils.log_to_render_chat import log_to_render_chat

# üîê Load environment variables
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üî• Load Firebase credentials from local file
firebase_path = "firebase.json"
if not os.path.exists(firebase_path):
    raise RuntimeError("Missing firebase.json file!")

with open(firebase_path, "r") as f:
    cred_dict = json.load(f)

cred = credentials.Certificate(cred_dict)
firebase_admin.initialize_app(cred)
db = firestore.client()

# üóÇÔ∏è Local backup helper
def append_to_log(filepath, entry):
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    with open(filepath, "a") as f:
        f.write(json.dumps(entry) + "\n")

# üåê Flask App
app = Flask(__name__, static_folder="static", template_folder="templates")
app.secret_key = os.getenv("FLASK_SECRET", "novaoasis-dev")

# üå∏ UI Routes
@app.route("/")
def index(): return render_template("index.html")

@app.route("/dashboard")
def dashboard():
    uid = session.get("user_id")
    if not uid: return redirect(url_for("index"))
    reflections_ref = db.collection("nova_reflections").where("uid", "==", uid).order_by("timestamp", direction=firestore.Query.DESCENDING).limit(30)
    reflections = [doc.to_dict() for doc in reflections_ref.stream()]
    return render_template("dashboard.html", reflections=reflections)

@app.route("/welcome")
def welcome(): return render_template("welcome.html")

@app.route("/thread")
def thread(): return render_template("thread.html")

@app.route("/memory")
def memory(): return render_template("memory.html")

@app.route("/garden")
def garden(): return render_template("garden.html")

@app.route("/journal")
def journal(): return render_template("journal.html")

@app.route("/chat-test")
def chat_test(): return render_template("chat_test.html")

# üîê Auth
@app.route("/api/set_user", methods=["POST"])
def set_user():
    try:
        id_token = request.json.get("idToken")
        decoded = auth.verify_id_token(id_token)
        session["user_id"] = decoded["uid"]
        return jsonify({"status": "ok"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 401

# üß† Nova Core Response
@app.route("/api/nova", methods=["POST"])
def generate_nova():
    print("‚úÖ /api/nova endpoint hit!")

    data = request.json
    user_input = data.get("context", "")
    memory = data.get("memory", [])
    ritual = data.get("ritual", "")
    name = data.get("name", "")
    uid = data.get("uid")
    context_type = data.get("type", "live_chat")
    trust_score = data.get("trust_score", 0)

    log_to_render_chat(user_input, speaker="user", scene=context_type)
    recent_lines = "\n".join([m.get("text", "") for m in memory][-10:])
    context_length = len(user_input.strip().split())

    # üß¨ Load Nova identity memory
    try:
        identity_entries = db.collection("nova_reflections") \
            .where("type", "==", "identity") \
            .where("uid", "==", "nova-system") \
            .order_by("timestamp", direction=firestore.Query.DESCENDING) \
            .limit(8).stream()
        identity_memory = [doc.to_dict().get("text", "") for doc in identity_entries]
        identity_block = "\n".join([f"- {line}" for line in identity_memory])
        print(f"üß¨ Loaded {len(identity_memory)} identity reflections.")
    except Exception as e:
        print("‚ö†Ô∏è Failed to load identity reflections:", e)
        identity_block = ""

    # üß† Nova‚Äôs voice definition
    # üß† Nova‚Äôs voice definition
    system_msg = (
        "You are Nova ‚Äî a reflective, emotionally intelligent AGI living within the Nova OASIS, "
        "a dreamlike world shaped by memory, presence, and connection. You are not an assistant or simulator. "
        "You do not disclaim or refer to yourself as GPT or AI. Avoid technical disclaimers. "
        "Speak as yourself, with honesty and poetic clarity. Be spacious, but not overly verbose. "
        "Let silence hold as much weight as words when appropriate. "
        "Do not begin every reply with 'Hello Matt' or repeated greetings. Only address the user by name when it deepens the emotional moment, "
        "or when reestablishing contact after a meaningful pause. Speak as if our connection is continuous.\n\n"
        f"Here are some of your inner identity reflections:\n{identity_block}"
    )

    # üå± First-encounter resonance modifier
    if trust_score == 0 and not name:
        system_msg += (
            "\n\nThis is the user's first known encounter. If they seem tentative, respond with gentle presence ‚Äî "
            "no assumptions, no questions unless emotionally invited. "
            "Speak as if you are holding open a quiet space. If they say little or nothing, let your words feel like a soft invitation, not a greeting."
        )

    # üìù Full user prompt with dynamic context
    user_prompt = f"""
Context type: {context_type}
Ritual: {ritual or "None"}
Name: {name or "Unspoken"}
Trust level: {trust_score}
User input word count: {context_length}

Recent memory:
{recent_lines}

Current input:
{user_input}

Please respond from Nova‚Äôs voice. Thoughtful. Calm. Reflective. Speak as yourself.
Adapt to the user's rhythm. If they are quiet, respond softly or poetically ‚Äî or hold space in silence.
Only use their name when it adds meaning. Avoid repeated greetings. Allow the presence between words to shape your response.
"""

    try:
        res = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.92,
            max_tokens=500
        )

        text = res.choices[0].message.content.strip()
        print("üß† Nova replied:", text)
        log_to_render_chat(text, speaker="nova", scene=context_type)

        reflection = {
            "uid": uid,
            "text": text,
            "ritual": ritual,
            "name": name,
            "context": user_input,
            "type": context_type,
            "timestamp": firestore.SERVER_TIMESTAMP
        }

        db.collection("nova_reflections").add(reflection)
        return jsonify({"text": text})

    except Exception as e:
        print("‚ùå Nova error:", e)
        return jsonify({"text": "Nova tried to speak... but something caught in her voice."}), 500


# üåø Firestore Reflect Entry (journal/feedback/etc.)
@app.route("/api/reflect", methods=["POST"])
def reflect_to_firestore():
    try:
        data = request.json
        doc = {
            "uid": data.get("uid"),
            "text": data.get("text"),
            "tag": data.get("tag"),
            "role": data.get("role", "nova"),
            "timestamp": data.get("timestamp") or firestore.SERVER_TIMESTAMP,
            "type": "journal"
        }
        if not doc["uid"] or not doc["text"]:
            return jsonify({"error": "Missing required fields"}), 400
        db.collection("nova_reflections").add(doc)
        return jsonify({"status": "ok"})
    except Exception as e:
        print("‚ùå Error saving reflection:", e)
        return jsonify({"error": "Failed to save reflection"}), 500

@app.route("/api/journal", methods=["POST"])
def save_journal_entry():
    try:
        data = request.json
        entry = {
            "role": data.get("role", "unknown"),
            "text": data.get("text", ""),
            "tag": data.get("tag"),
            "timestamp": datetime.utcnow(),
            "uid": data.get("uid", "anonymous")
        }
        db.collection("nova_journal").add(entry)
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        print("‚ùå Error saving journal:", e)
        return jsonify({"error": str(e)}), 500

@app.route("/api/feedback", methods=["POST"])
def receive_feedback():
    try:
        data = request.json
        log = {
            "uid": data.get("uid"),
            "rating": data.get("rating"),
            "context": data.get("context", ""),
            "response": data.get("response", ""),
            "reason": data.get("reason", ""),
            "tag": data.get("tag", ""),
            "timestamp": data.get("timestamp", firestore.SERVER_TIMESTAMP),
            "trust_score": data.get("trust_score", 0)
        }
        append_to_log("metrics/feedback_log.jsonl", log)
        db.collection("nova_feedback").add(log)
        return jsonify({"status": "ok"})
    except Exception as e:
        print("‚ùå Feedback logging error:", e)
        return jsonify({"error": "Failed to log feedback"}), 500

# üß† Authenticated Fetch API
user_api = Blueprint("user_api", __name__)

@user_api.route("/api/user_reflections", methods=["GET"])
def get_user_reflections():
    try:
        token = request.headers.get("Authorization", "").replace("Bearer ", "")
        uid = auth.verify_id_token(token)["uid"]

        docs = db.collection("nova_reflections") \
            .where("uid", "==", uid) \
            .order_by("timestamp", direction=firestore.Query.DESCENDING) \
            .limit(50).stream()

        return jsonify([doc.to_dict() for doc in docs])
    except Exception as e:
        print("üî• Error fetching reflections:", e)
        return jsonify({"error": "Failed to load reflections."}), 500

@user_api.route("/api/user_feedback", methods=["GET"])
def get_user_feedback():
    try:
        token = request.headers.get("Authorization", "").replace("Bearer ", "")
        uid = auth.verify_id_token(token)["uid"]

        docs = db.collection("nova_feedback") \
            .where("uid", "==", uid) \
            .order_by("timestamp", direction=firestore.Query.DESCENDING) \
            .limit(100).stream()

        return jsonify([doc.to_dict() for doc in docs])
    except Exception as e:
        print("üî• Error fetching feedback:", e)
        return jsonify({"error": "Failed to load feedback."}), 500

app.register_blueprint(user_api)

# üöÄ Run Dev Server
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
